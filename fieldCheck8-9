#!/usr/bin/env python
#title           :fieldCheck.py
#description     :This application should be used to find differences in files by field location.
#author          :Nate Novicki
#date            :July 2016
#Python version  :Python2.7

import os
import os.path
import filecmp
import sys

''' File 1 '''
f1Look = ''
''' File 2 '''
f2Look = ''
''' Directory location '''
loc = ''
fieldFind1=''
fieldFind2=''

''' Arrays '''
a = []
b = []

''' Global Variables '''
perfNum = 0
badNum = 0
totCount1 = 0
totCount2 = 0



''' main function to allow simple flow of control with any code adjustments '''
def main():


    quickComp()


### QuickComp does most of the actual file comparison ###
def quickComp():

# First we find our directory (see fileNav)
    fileNav(loc)

# Prompt the user for the name of the file they are
# looking for then run f1Finder to verify the file exists.
    print ('Input control file name'+'\n'+'                    ***WARNING***'+
          '\n'+"Don't forget to include file extensions! (i.e. .txt, .docx, .dat)"+'\n')
    f1Finder()

# Prompt the user for the name of the file they are
# looking for then run f2Finder to verify the file exists.
    print ('Input test file name'+'\n'+'                    ***WARNING***'+
          '\n'+"Don't forget to include file extensions! (i.e. .txt, .docx, .dat)"+'\n')
    f2Finder()

### Compare the files using file.cmp ###

    locInput()
    
    restartProg()

    
### FileNav simply ensures you are using a directory that exists ###
def fileNav(loc):
    print('\n'+'Please input the file path to the files you wish'+
          ' to compare:'+'\n')

    dirSel = raw_input()
    #dirSel='C:\Users\NNOVICKI\Desktop\fieldCheck\FileRepo' # Clever users will notice a variable can
    #                                               be used to cut time typing the dirctory name.
    if not os.path.exists(dirSel):
        print ('\n'+'Directory not found.'+'\n'+'Try Again.'+'\n')
        quickComp()
    print ('\n'+'Navigated to '+str(dirSel))

    conArray = os.listdir(dirSel)
        
    print('Files in directory '+str(dirSel)+':')
    for index in range(len(conArray)):
        print(conArray[index])
    print('\n')

    loc = os.chdir(dirSel)
    return loc

### f1Finder and f2Finder both make sure the user is comparing actual files ###
def f1Finder():
    global f1Look
    f1Look = raw_input()
    fThere = os.path.isfile(f1Look)
    if not os.path.exists(f1Look):
        print ('File could not be found. Try Again.'+'\n')
        f1Finder()
    print ('Control File: '+str(f1Look)+'\n')
def f2Finder():
    global f2Look
    f2Look = raw_input()
    fThere2 = os.path.isfile(f2Look)
    if not os.path.exists(f2Look):
        print ('File could not be found. Try Again.'+'\n')
        f2Finder()
    print ('Test File: '+str(f2Look)+'\n')


### Restart function ###
def restartProg():
    again = raw_input('\n'+'\n'+'Compare more files? Enter y/n: '+'\n')

    if again == 'n':
        exit()
    elif again == 'y':
        quickComp()
    else:
        print ('You should enter either \"y\" or \"n\".'+'\n')
        restartProg()

def locInput():

    perfNum = 0
    badNum = 0
    totCount1 = 0
    totCount2 = 0
    start = 0
    end = 0
    startF = 0
    endF = 0
    a = []
    b = []
    
    f = open(f1Look,'r')
    copy = open('TxtLand.txt','w')
    
    f2 = open(f2Look,'r')
    copy2 = open('TxtLand2.txt','w')
    print('-------------------------------- 1st Position ----------------------------------')
    print('----------------------------------- Control ------------------------------------')
    dataRan = raw_input('Input start and end field locations'+
                           ' separated by a colon, comma, or dash.'+'\n')
    
# These massive chunks of if/elif code handle the logic of the field location.
# There are better ways for this to be coded in theory, I just went with a clunky
# but simple system.
    for line in f:
        
        if len(dataRan)==0:
            startF = 0
            endF = 0
        elif len(dataRan)==1:
            startF = dataRan[0]
            endF = dataRan[0]
        elif len(dataRan)==2:
            startF = dataRan[0]
            endF = dataRan[1]
        elif len(dataRan)==3:
            startF = dataRan[0]
            endF = dataRan[2]
        elif len(dataRan)==4:
            startF = dataRan[0]
            endF = dataRan[2:3]
        elif len(dataRan)==5:
            startF = dataRan[0:2]
            endF = dataRan[3:5]
        elif len(dataRan)==6:
            startF = dataRan[0:2]
            endF = dataRan[3:6]
        elif len(dataRan)==7:
            startF = dataRan[0:3]
            endF = dataRan[4:7]
        elif len(dataRan)==8:
            startF = dataRan[0:3]
            endF = dataRan[4:8]
        elif len(dataRan)==9:
            startF = dataRan[0:4]
            endF = dataRan[5:9]
          
            
        fieldFind = str(line[(int(startF)-1):(int(endF)-1)])
        
        copy.write(fieldFind)
        a.append(fieldFind)
        
        totCount1+=1

    print('\n')
    print('-------------------------------- 2nd Position ----------------------------------')
    print('----------------------------------- Control ------------------------------------')
    dataRan = raw_input('Input start and end field locations'+
                           ' separated by a colon, comma, or dash.'+'\n')
##        
# Logic for the second set of field locations.
    for line2 in f2:

        if len(dataRan)==0:
            start = 0
            end = 0
        elif len(dataRan)==1:
            start = dataRan[0]
            end = dataRan[0]
        elif len(dataRan)==2:
            start = dataRan[0]
            end = dataRan[1]
        elif len(dataRan)==3:
            start = dataRan[0]
            end = dataRan[2]
        elif len(dataRan)==4:
            start = dataRan[0]
            end = dataRan[2:3]
        elif len(dataRan)==5:
            start = dataRan[0:2]
            end = dataRan[3:5]
        elif len(dataRan)==6:
            start = dataRan[0:2]
            end = dataRan[3:6]
        elif len(dataRan)==7:
            start = dataRan[0:3]
            end = dataRan[4:7]
        elif len(dataRan)==8:
            start = dataRan[0:3]
            end = dataRan[4:8]
        elif len(dataRan)==9:
            start = dataRan[0:4]
            end = dataRan[5:9]
            
            
        fieldFind2 = str(line2[(int(start)-1):(int(end)-1)])
        

        copy2.write(fieldFind2)
        b.append(fieldFind2)
        totCount2+=1
        
# No matter the changes made to the code always make sure you close the open files.
# Some files are big enough to cause real problems if they don't close.
    copy.seek(0)
    copy2.seek(0)
    copy.truncate()
    copy2.truncate()
    f.close()
    
    copy.close()
    f2.close()
    copy2.close()

   
    try:
        for i in range(totCount1):  
            if a[i] == b[i]:
                
                perfNum+=1
            else:
                print('\n'+'Difference at:'+'\n'+str(a[i])+'\n'+(b[i]))
                print('Line '+str(i+1)+' of '+str(totCount1+1)+'\n'
                      +'---------------------------------------'+
                      '-----------------------------------------')
                badNum+=1

        print('There were '+str(perfNum)+' perfect matches and '+
                  str(badNum)+' differences between these files.')
        respo = raw_input('Check antoher location? Enter y/n: '+'\n')
        if respo == 'y':
            locInput()
        else:
            restartProg()
    except IndexError:
        print('There were '+str(perfNum)+' perfect matches and '+
                  str(badNum)+' differences between these files.')
        respo = raw_input('Check antoher location? Enter y/n: '+'\n')
        if respo == 'y':
            locInput()
        else:
            restartProg()

        
### Standard Python boilerplate code ###    
if __name__=='__main__':
    main()
